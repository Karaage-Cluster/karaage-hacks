#!/usr/bin/python
# Copyright 2015 VPAC
#
# This file is part of Karaage.
#
# Karaage is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Karaage is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Karaage  If not, see <http://www.gnu.org/licenses/>.
from __future__ import division
from __future__ import absolute_import
from __future__ import print_function
from __future__ import unicode_literals

import datetime

from ldap3.core.exceptions import LDAPSizeLimitExceededResult

import os
os.environ['DJANGO_SETTINGS_MODULE'] = 'karaage.conf.settings'

import argparse

import django
from django.conf import settings

from karaage.datastores.ldap_schemas import ad_account_group
from karaage.people.models import Person, Group
from karaage.machines.models import Account, MachineCategory
from karaage.projects.models import Project, ProjectQuota
from karaage.institutes.models import Institute, InstituteQuota


def get_group_members(group):
    for member in group.primary_accounts.all():
        yield member
    for member in group.secondary_accounts.all():
        yield member


def sync_account(member, institute, mc, default_group):
    values = {
        'email': member.mail,
        'short_name': member.givenName,
        'full_name': member.displayName,
        'institute': institute,
    }

    person, created = Person.objects.update_or_create(
        username=member.uid, defaults=values)
    if created:
        print("Created person %s." % person)

    default_group.members.add(person)

    values = {
        'username': member.uid,
        'shell': member.loginShell,
        'login_enabled': False,
        'date_created': datetime.datetime.today(),
    }

    account, created = Account.objects.update_or_create(
        person=person, machine_category=mc, defaults=values)

    if created:
        print("Created account %s." % account.id)


def sync_group_members(group, people):
    """Synchronise membership list with minimal updates."""
    # determine old set of member ids
    old_member_ids = set(group.members.values_list('pk', flat=True))

    # determine new set of member ids
    new_member_ids = set()
    for person in people:
        if hasattr(person, 'pk'):
            person_id = person.pk
        else:
            person_id = int(person)
        new_member_ids.add(person_id)

    # people to be added
    add_member_ids = new_member_ids.difference(old_member_ids)
    if add_member_ids:
        print("Group %s adding %s." % (group, add_member_ids))
        group.members.add(
            *[tmp_person_id for tmp_person_id in add_member_ids])

    # people to be removed
    del_member_ids = old_member_ids.difference(new_member_ids)
    if del_member_ids:
        print("Group %s removing %s." % (group, del_member_ids))
        group.members.remove(
            *[tmp_person_id for tmp_person_id in del_member_ids])


def main():
    parser = argparse.ArgumentParser(
        description="Copy LDAP to Karaage.",
    )

    parser.add_argument(
        "--debug", action="store_true",
        help="Print Debugging Messages")

    args = parser.parse_args()

    global group_manager

    group, _ = Group.objects.get_or_create(name="linuxusers")
    institute, _ = Institute.objects.update_or_create(
        group=group, defaults={'name': 'Sydney'})
    mc, _ = MachineCategory.objects.update_or_create(
        name="default", defaults={'datastore': 'dummy'})

    default_group, _ = Group.objects.get_or_create(name="default")
    default_project, _ = Project.objects.update_or_create(
        group=default_group, defaults={
            'pid': 'default',
            'name': 'default',
            'description': 'Default catch all project',
            'institute': institute,
        }
    )
    pq, _ = ProjectQuota.objects.update_or_create(
        project=default_project, machine_category=mc, defaults={})

    try:
        group = group_manager.get(cn="HPC-ACL")
        for member in get_group_members(group):
            sync_account(member, institute, mc, default_group)

        for group_name, group_settings in settings.SYNC_GROUPS.items():
            group = group_manager.get(cn=group_name)

            i_id = group_settings['institute']
            i_name = settings.SYNC_INSTITUTES[i_id]['name']
            i_group, c_group = Group.objects.get_or_create(name=i_id)
            i, c_institute = Institute.objects.update_or_create(
                group=i_group, defaults={
                    'name': i_name,
                }
            )
            iq, _ = InstituteQuota.objects.update_or_create(
                institute=institute, machine_category=mc, defaults={
                    'quota': 0,
                }
            )

            if c_group:
                print("Created group %s." % i_group)
            if c_institute:
                print("Created institute %s." % i)

            p_id = group_name
            p_name = group_settings['project']
            p_group, c_group = Group.objects.get_or_create(name=group_name)
            p, c_project = Project.objects.update_or_create(
                group=p_group, defaults={
                    'pid': p_id,
                    'name': p_name,
                    'description': 'Project auto created from %s.'
                    % group_name,
                    'institute': i,
                }
            )
            pq, _ = ProjectQuota.objects.update_or_create(
                project=p, machine_category=mc, defaults={})
            p.activate(approved_by=None)
            if c_group:
                print("Created group %s." % p_group)
            if c_project:
                print("Created project %s." % p)

            people = []
            for member in get_group_members(group):
                try:
                    person = Person.objects.get(username=member.uid)
                    people.append(person.pk)
                except Person.DoesNotExist:
                    if args.debug:
                        print(
                            "Person username %s from group %s does not exist, "
                            "probably not in the HPC-ACL group."
                            % (member.uid, group.cn))
            sync_group_members(p_group, people)

    except LDAPSizeLimitExceededResult:
        print("size exceeded.")
        exit(1)


# FIXME: we should not hard code settings here, for read only should be ok.
group_manager = ad_account_group.objects.db_manager(
    settings={}, using="default")

if __name__ == "__main__":
    django.setup()
    main()
